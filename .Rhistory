reticulate::repl_python()
for i in range(3):
print(‘Hello!’)
for i in range(3):
print(‘Hello!’)
for i in range(3):
print(‘Hello!’)
"Hello!"
for i in range(3):
"Hello!"
for i in range(3):
print("Hello!")
# a simple for-loop
for i in (1:3){
print(“Hello!”)
}
quit
# a simple for-loop
for i in (1:3){
# a simple for-loop
for (i in seq(1:3)){
print(“Hello!”)
# a simple for-loop
for(i in seq(1:3)){
print("Hello!")
}
reticulate::repl_python()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# 1.0 Plotting Discrete Data
# Load the data
DAT1 = pd.read_csv("./data_ANSCOMBE.csv")
os.chdir("C:/Users/kelop/OneDrive/Documents/GitHub/ReproRehab/")
os.listdir()
os.listdir("./data")
DAT1 = pd.read_csv("./data/data_ANSCOMBE.csv")
os.chdir("C:/Users/kelop/OneDrive/Documents/GitHub/PhysTher5110/")
os.listdir()
os.listdir("./data")
# 1.0 Plotting Discrete Data
# Load the data
DAT1 = pd.read_csv("./data/data_ANSCOMBE.csv")
print(DAT1.head())
# Regression Coefficients
COEFS = DAT1.groupby('group').apply(lambda group_df: group_df.agg({
'xVal': 'mean',
'yVal': 'mean',
'xVal': 'std',
'yVal': 'std'
})).reset_index()
COEFS.columns = ['group', 'MeanX', 'MeanY', 'SDX', 'SDY']
print(COEFS)
print(DAT1.head())
# Regression Coefficients
COEFS = DAT1.groupby('group').apply(lambda group_df: group_df.agg({
'xVal': 'mean',
'yVal': 'mean',
'xVal': 'std',
'yVal': 'std'
})).reset_index()
print(COEFS)
COEFS = DAT1.groupby('group').agg(
Intercept=lambda x: stats.linregress(x['xVal'], x['yVal']).intercept,
Slope=lambda x: stats.linregress(x['xVal'], x['yVal']).slope,
MeanY=('yVal', 'mean'),
SDY=('yVal', 'std'),
MeanX=('xVal', 'mean'),
SDX=('xVal', 'std')
).reset_index()
print(COEFS)
import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
import os
os.chdir("C:/Users/kelop/OneDrive/Documents/GitHub/PhysTher5110/")
os.listdir()
os.listdir("./data")
# 1.0 Plotting Discrete Data
# Load the data
DAT1 = pd.read_csv("./data/data_ANSCOMBE.csv")
print(DAT1.head())
# Regression Coefficients
COEFS = DAT1.groupby('group').agg(
Intercept=('yVal', lambda x: stats.linregress(x, DAT1.loc[x.index, 'xVal']).intercept),
Slope=('yVal', lambda x: stats.linregress(x, DAT1.loc[x.index, 'xVal']).slope),
MeanY=('yVal', 'mean'),
SDY=('yVal', 'std'),
MeanX=('xVal', 'mean'),
SDX=('xVal', 'std')
).reset_index()
print(COEFS)
# Visualizing All the Data
g = sns.FacetGrid(data=DAT1, col='group', col_wrap=2)
g.map_dataframe(sns.scatterplot, x='xVal', y='yVal', hue='group', palette='Set1', marker='o')
g.map_dataframe(sns.regplot, x='xVal', y='yVal', scatter=False, color='k')
g.set_axis_labels("X Values", "Y Values")
g.set_titles("Group {col_name}")
g.set(ylim=(0, 12))
plt.legend(title="Group", loc='upper right', bbox_to_anchor=(1.15, 1.0))
plt.show()
# Disctrete Categorical Data
DAT2 = pd.read_csv("./data_FINAL_RATINGS.csv")
DAT2 = pd.read_csv("./data/data_FINAL_RATINGS.csv")
print(DAT2.head())
# Just the means
MEANS = DAT2.groupby(['Elevation', 'Speed'])['Effort'].agg(['mean', 'count', 'std']).reset_index()
MEANS.columns = ['Elevation', 'Speed', 'ave_Effort', 'N', 'SD']
print(MEANS)
g = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
g.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1')
g.set_axis_labels("Elevation", "Effort (%)")
g.set_titles("Speed {col_name}")
g.set(ylim=(0, 100))
plt.show()
# Means with Standard errors
g = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
g.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', ci="sd", errcolor="k")
g.set_axis_labels("Elevation", "Effort (%)")
g.set_titles("Speed {col_name}")
g.set(ylim=(0, 100))
plt.show()
g = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
g.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', ci="sd", errcolor="k")
g.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="sd", errcolor="k")
g = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
g.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="sd", errcolor="k")
g.set_axis_labels("Elevation", "Effort (%)")
g.set_titles("Speed {col_name}")
g.set(ylim=(0, 100))
plt.show()
e = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="sd", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
g.set(ylim=(0, 100))
plt.show()
g = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
g.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1')
g.set_axis_labels("Elevation", "Effort (%)")
g.set_titles("Speed {col_name}")
g.set(ylim=(0, 100))
plt.show()
# Means with Standard errors
e = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="sd", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
plt.clf()
# Means with Standard errors
e = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="sd", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
plt.clf()
g = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
g.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1')
g.set_axis_labels("Elevation", "Effort (%)")
g.set_titles("Speed {col_name}")
g.set(ylim=(0, 100))
plt.show()
plt.clf()
# Means with Standard errors
e = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="sd", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
plt.clf()
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="ci", errcolor="k")
e = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="ci", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
plt.clf()
e = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', ci="sd", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
e = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', ci="sd", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
plt.clf()
e = sns.FacetGrid(data=MEANS, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="sd", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
plt.clf()
# All the data
g = sns.FacetGrid(data=DAT2, col='Speed', sharey=False)
g.map(sns.scatterplot, 'Elevation', 'Effort', hue='Elevation', palette='Set1', marker='o')
g.set_axis_labels("Elevation", "Effort (%)")
g.set_titles("Speed {col_name}")
g.set(ylim=(0, 100))
plt.legend(title="Elevation", loc='upper right', bbox_to_anchor=(1.15, 1.0))
plt.show()
plt.legend(title="Group", loc='none', bbox_to_anchor=(1.15, 1.0))
g = sns.FacetGrid(data=DAT1, col='group', col_wrap=2)
g.map_dataframe(sns.scatterplot, x='xVal', y='yVal', hue='group', palette='Set1', marker='o')
g.map_dataframe(sns.regplot, x='xVal', y='yVal', scatter=False, color='k')
g.set_axis_labels("X Values", "Y Values")
g.set_titles("Group {col_name}")
g.set(ylim=(0, 15))
plt.show()
e = sns.FacetGrid(data=DAT1, col='Speed', sharey=False)
e.map(sns.barplot, 'Elevation', 'ave_Effort', palette='Set1', errorbar="sd", errcolor="k")
e.set_axis_labels("Elevation", "Effort (%)")
e.set_titles("Speed {col_name}")
e.set(ylim=(0, 100))
plt.show()
sns.set(style="whitegrid")
g = sns.FacetGrid(data=DAT2, col='Speed', sharey=False)
g.map(sns.scatterplot, 'Elevation', 'Effort', hue='Elevation', palette=custom_colors, marker='o', s=50, alpha=0.8)
g.set_axis_labels("Elevation", "Effort (%)")
g.set(ylim=(0, 100))
g.despine(left=True, bottom=True)
custom_colors = ["#E69F00", "#56B4E9"]
# Create the scatter plot
sns.set(style="whitegrid")
g = sns.FacetGrid(data=DAT2, col='Speed', sharey=False)
g.map(sns.scatterplot, 'Elevation', 'Effort', hue='Elevation', palette=custom_colors, marker='o', s=50, alpha=0.8)
g.set_axis_labels("Elevation", "Effort (%)")
g.set(ylim=(0, 100))
g.despine(left=True, bottom=True)
# Remove legend
g.add_legend().set_title("")
# Customize font size and style
g.set_titles(size=16, fontweight='bold')
g.set_xticklabels(fontsize=16, color="black")
g.set_yticklabels(fontsize=16, color="black")
g.set_xlabels(fontsize=16, fontweight='bold')
g.set_ylabels(fontsize=16, fontweight='bold')
plt.show()
custom_colors = ["#E69F00", "#56B4E9"]
# Create the scatter plot
sns.set(style="whitegrid")
g = sns.FacetGrid(data=DAT2, col='Speed', sharey=False)
g.map(sns.scatterplot, 'Elevation', 'Effort', hue='Elevation', palette=custom_colors, marker='o', s=50, alpha=0.8)
g.set_axis_labels("Elevation", "Effort (%)")
g.set(ylim=(0, 100))
g.despine(left=True, bottom=True)
# Remove legend
g.add_legend().set_title("")
# Customize font size and style
g.set_titles(size=16, fontweight='bold')
g.set_xticklabels(fontsize=16, color="black")
g.set_yticklabels(fontsize=16, color="black")
g.set_xlabels(fontsize=16, fontweight='bold')
g.set_ylabels(fontsize=16, fontweight='bold')
plt.show()
View(DAT2)
quit
# Connect the dots
head(DAT2)
DAT3 <- DAT2 %>%
group_by(Elevation, Speed) %>%
summarise(Effort=mean(Effort))
head(DAT3)
library(tidyverse);
# By treating this workshop as an R project, we can use relative file paths that
# allow you to open the data anywhere on any computer, provided you have downloaded
# the whole workshop folder.
getwd()
## 1.0 Plotting Discrete Data --------------------------------------------------
# Anscombe's Quartet and the Importance of Checking Assumptions
DAT1 <- read.csv("./data_ANSCOMBE.csv", header = TRUE, sep = ",")
setwd("~/GitHub/PhysTher5110/scripts/R")
setwd("~/GitHub/PhysTher5110/")
## 1.0 Plotting Discrete Data --------------------------------------------------
# Anscombe's Quartet and the Importance of Checking Assumptions
DAT1 <- read.csv("./data/data_ANSCOMBE.csv", header = TRUE, sep = ",")
head(DAT1)
## Regression Coefficients ----
COEFS<-DAT1 %>%
group_by(group) %>%
summarise(Intercept=lm(yVal~xVal, data=DAT1)$coefficients[1],
Slope=lm(yVal~xVal, data=DAT1)$coefficients[2],
MeanY=mean(yVal),
SDY = sd(yVal),
MeanX=mean(xVal),
SDX = sd(xVal))
COEFS
# Visualizing All the Data
ggplot(DAT1, aes(x = xVal, y = yVal)) +
geom_point(aes(fill=as.factor(group)), pch=21, color="black", size=2)+
stat_smooth(aes(col=as.factor(group)), method="lm", se=FALSE, lwd=1)+
facet_wrap(~group, ncol=2)+
scale_x_continuous(name = "X Values") +
scale_y_continuous(name = "Y Values") +
theme(axis.text=element_text(size=16, color="black"),
axis.title=element_text(size=16, face="bold"),
plot.title=element_text(size=16, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
#axis.text.y=element_blank(),
#axis.title.y=element_blank(),
#axis.ticks.y=element_blank(),
legend.position = "none")
## Disctrete Categorical Data
DAT2 <- read.csv("./data_FINAL_RATINGS.csv", header = TRUE, sep = ",")
## Disctrete Categorical Data
DAT2 <- read.csv("./data/data_FINAL_RATINGS.csv", header = TRUE, sep = ",")
head(DAT2)
MEANS<-DAT2 %>%
group_by(Elevation, Speed) %>%
summarise(ave_Effort=mean(Effort),
N = length(Effort),
SD = sd(Effort))
MEANS
# Just the means
ggplot(MEANS, aes(x = Elevation, y = ave_Effort)) +
geom_bar(aes(fill=Elevation), stat="identity", width = 0.5)+
facet_wrap(~Speed) +
scale_y_continuous(name = "Effort (%)", limits = c(0,100)) +
#scale_fill_manual(values=c("#E69F00", "#56B4E9"))+
theme(axis.text=element_text(size=16, color="black"),
axis.title=element_text(size=16, face="bold"),
plot.title=element_text(size=16, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=16, face="bold"),
legend.position = "none")
# Means with Standard errors
ggplot(MEANS, aes(x = Elevation, y = ave_Effort)) +
geom_bar(aes(fill=Elevation, col=Elevation),
stat="identity", width = 0.5)+
geom_errorbar(aes(ymin = ave_Effort-SD/sqrt(N), ymax=ave_Effort+SD/sqrt(N)),
width = 0.2)+
scale_fill_manual(values=c("#E69F00", "#56B4E9"))+
scale_color_manual(values=c("#E69F00", "#56B4E9"))+
facet_wrap(~Speed) +
scale_y_continuous(name = "Effort (%)", limits = c(0,100)) +
theme(axis.text=element_text(size=16, color="black"),
axis.title=element_text(size=16, face="bold"),
plot.title=element_text(size=16, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=16, face="bold"),
legend.position = "none")
# All the data
ggplot(DAT2, aes(x = Elevation, y = Effort)) +
geom_point(aes(fill=Elevation), pch=21, size=2,
position=position_jitter(w=0.2, h=0))+
facet_wrap(~Speed) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))+
scale_color_manual(values=c("#E69F00", "#56B4E9"))+
scale_y_continuous(name = "Effort (%)", limits = c(0,100)) +
theme(axis.text=element_text(size=16, color="black"),
axis.title=element_text(size=16, face="bold"),
plot.title=element_text(size=16, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=16, face="bold"),
legend.position = "none")
# Just the means
ggplot(MEANS, aes(x = Elevation, y = ave_Effort)) +
geom_bar(aes(fill=Elevation), stat="identity", width = 0.5)+
facet_wrap(~Speed) +
scale_y_continuous(name = "Effort (%)", limits = c(0,100)) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))+
scale_color_manual(values=c("#E69F00", "#56B4E9"))+
#scale_fill_manual(values=c("#E69F00", "#56B4E9"))+
theme(axis.text=element_text(size=16, color="black"),
axis.title=element_text(size=16, face="bold"),
plot.title=element_text(size=16, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=16, face="bold"),
legend.position = "none")
# Means with Standard errors
ggplot(MEANS, aes(x = Elevation, y = ave_Effort)) +
geom_bar(aes(fill=Elevation, col=Elevation),
stat="identity", width = 0.5)+
geom_errorbar(aes(ymin = ave_Effort-SD/sqrt(N), ymax=ave_Effort+SD/sqrt(N)),
width = 0.2)+
scale_fill_manual(values=c("#E69F00", "#56B4E9"))+
scale_color_manual(values=c("#E69F00", "#56B4E9"))+
facet_wrap(~Speed) +
scale_y_continuous(name = "Effort (%)", limits = c(0,100)) +
theme(axis.text=element_text(size=16, color="black"),
axis.title=element_text(size=16, face="bold"),
plot.title=element_text(size=16, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=16, face="bold"),
legend.position = "none")
# All the data
ggplot(DAT2, aes(x = Elevation, y = Effort)) +
geom_point(aes(fill=Elevation), pch=21, size=2,
position=position_jitter(w=0.2, h=0))+
facet_wrap(~Speed) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))+
scale_color_manual(values=c("#E69F00", "#56B4E9"))+
scale_y_continuous(name = "Effort (%)", limits = c(0,100)) +
theme(axis.text=element_text(size=16, color="black"),
axis.title=element_text(size=16, face="bold"),
plot.title=element_text(size=16, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=16, face="bold"),
legend.position = "none")
# Boxplots
ggplot(DAT2, aes(x = Elevation, y = Effort)) +
geom_point(aes(fill=Elevation), pch=21, size=2,
position=position_jitter(w=0.2, h=0))+
geom_boxplot(fill="white", col="black", outlier.shape = "na",
alpha=0.4, width=0.5)+
facet_wrap(~Speed) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))+
scale_color_manual(values=c("#E69F00", "#56B4E9"))+
scale_y_continuous(name = "Effort (%)", limits = c(0,100)) +
theme(axis.text=element_text(size=16, color="black"),
axis.title=element_text(size=16, face="bold"),
plot.title=element_text(size=16, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=16, face="bold"),
legend.position = "none")
